# -*- coding: utf-8 -*-
"""Diabetes Prediction using Machine Learning with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLnC31fYBk6yh_SdZn16twIsEmwIaNn0
"""

# Importing Dependancies
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler  # To standardize out data
from sklearn.metrics import accuracy_score  # Accuracy
from sklearn.model_selection import train_test_split  #split data for training and test
from sklearn import svm

"""# Data Collection and Analysis"""

# Data from PIMA - Diabetes dataset
# Loading dataset to pandas dataframe
dataset=pd.read_csv('/content/diabetes.csv')
dataset.head() #To get the first five rows

"""EDA"""

dataset.shape # shape of dataset

dataset.describe() # Statistical describe

dataset["Outcome"].value_counts() # to know the count of 0,1 in outcome column

# 0 - > Non Diabetic, 1 -> Diabetic.
# We are going to look at the mean value of outcome column
dataset.groupby('Outcome').mean()

#Separating the data(X) and Labels(y)
X=dataset.drop(columns= 'Outcome', axis=1)
y=dataset['Outcome']

X

y

"""### [Data **Preprocessing**] - Standardization"""

scaler=StandardScaler()
scaler.fit(X)
standardize_dataset=scaler.transform(X)
standardize_dataset

X=standardize_dataset

# Train Test split
X_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.3,stratify=y,random_state=2)
#Stratify  is to train and test to be split based on outcome in same propotion as there in original dataset
# if we didnt use this there is a chance of overfitting to one type

print(X_train.shape,X.shape,X_test.shape)

#Train the Model
classify= svm.SVC(kernel="linear") # SVC-> Support Vector Classifier
classify.fit(X_train,y_train)# fit the training data and its labels

#Model Evaluation and Accuracy - Training dataset

x_train_prediction = classify.predict(X_train)
training_acc=accuracy_score(x_train_prediction,y_train)
training_acc

#Model Evaluation and Accuracy - Test dataset
X_test_predict=classify.predict(X_test)
test_acc=accuracy_score(X_test_predict,y_test)
test_acc

"""Making Predictive System"""

input_data=(10,101,76,48,180,32.9,0.171,63) # For this given data we are going to predict
input_data_as_numpy_array=np.asarray(input_data)# Changing the list to numpy array as it is convenient to do operations

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1) # This will makes the model to understand we are going to predict for only one data rather than expecting 768
std_data=scaler.transform(input_data_reshaped)# We need to standardize the input as we trained the model in standardize
prediction=classify.predict(std_data)#Claassify holds the SVM 
prediction

if (prediction[0]==0):
  print("The Given person is Non-Diabetic")
else:
  Print("The Given person is Diabetic")

